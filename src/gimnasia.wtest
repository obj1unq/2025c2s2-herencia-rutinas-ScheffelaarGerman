
import rutinas.*
import personas.*
import club.*

describe "Rutinas deportivas - Puntos 1, 2 y 3" {

	// Punto 1: Rutinas
	const correrEnLaPlaya = new Rutina(actividad = new Running(intensidad = 1.2))
	const maratonBA = new Rutina(actividad = new Maraton(intensidad = 1.5))
	const remarEnElDelta = new Rutina(actividad = new Remo())
	const remarEnCaminoRemeros = new Rutina(actividad = new RemoDeCompeticion())

	// Punto 2: Personas
	const calamardo = new Sedentaria(peso = 60, tiempo = 5)
	const bob = new Atleta(peso = 40)

	// Punto 3: Clubes y predios
	const recreo = new Predio(rutinas = #{correrEnLaPlaya, maratonBA})
	const nautico = new Predio(rutinas = #{remarEnElDelta, remarEnCaminoRemeros})
	const clubBarrial = new Club(predios = #{recreo, nautico})

	// Punto 1
	test "1.1 Running" {
		assert.equals(360, correrEnLaPlaya.calorias(5))
		assert.equals(10200, correrEnLaPlaya.calorias(90))
	}

	test "1.2 Maratón" {
		assert.equals(900, maratonBA.calorias(5))
		assert.equals(25500, maratonBA.calorias(90))
	}

	test "1.3 Remo" {
		assert.equals(520, remarEnElDelta.calorias(5))
		assert.equals(9360, remarEnElDelta.calorias(90))
	}

	test "1.4 Remo de competición" {
		assert.equals(510, remarEnCaminoRemeros.calorias(5))
		assert.equals(12750, remarEnCaminoRemeros.calorias(90))
	}

	// Punto 2
	test "2.1.1 Sedentaria - Running" {
		calamardo.practicar(correrEnLaPlaya)
		assert.equals(59.948, calamardo.peso().truncate(3))
	}

	test "2.1.2 Sedentaria - Maratón" {
		calamardo.peso(60)
		calamardo.practicar(maratonBA)
		assert.equals(59.871, calamardo.peso().truncate(3))
	}

	test "2.1.3 Sedentaria - Remo" {
		calamardo.peso(60)
		calamardo.practicar(remarEnElDelta)
		assert.equals(59.925, calamardo.peso().truncate(3))
	}

	test "2.1.4 Sedentaria - Remo competición" {
		calamardo.peso(60)
		calamardo.practicar(remarEnCaminoRemeros)
		assert.equals(59.927, calamardo.peso().truncate(3))
	}

	test "2.1.5 Sedentaria - No puede practicar" {
		calamardo.peso(40)
		calamardo.practicar(correrEnLaPlaya)
		assert.equals(40, calamardo.peso())
	}

	test "2.2.1 Atleta - Running" {
		bob.peso(40)
		bob.practicar(correrEnLaPlaya)
		assert.equals(39.725, bob.peso().truncate(3))
	}

	test "2.2.2 Atleta - Maratón" {
		bob.peso(40)
		bob.practicar(maratonBA)
		assert.equals(37.812, bob.peso().truncate(3))
	}

	test "2.2.3 Atleta - Remo (no puede practicar)" {
		bob.peso(40)
		bob.practicar(remarEnElDelta)
		assert.equals(40, bob.peso())
	}

	test "2.2.4 Atleta - Remo de competición" {
		bob.peso(40)
		bob.practicar(remarEnCaminoRemeros)
		assert.equals(39.406, bob.peso().truncate(3))
	}

	// Punto 3

	test "3.1 Mejor predio" {
		assert.equals(recreo, clubBarrial.mejorPredio(bob))
		assert.equals(recreo, clubBarrial.mejorPredio(calamardo))
	}

	test "3.2 Predios tranquis" {
		assert.equals(#{}, clubBarrial.prediosTranqui(bob))
		assert.equals(#{recreo}, clubBarrial.prediosTranqui(calamardo))
	}

	test "3.3 Rutinas más exigentes" {
		assert.equals(#{maratonBA, remarEnCaminoRemeros}, clubBarrial.rutinasMasExigentes(bob))
		assert.equals(#{maratonBA, remarEnElDelta}, clubBarrial.rutinasMasExigentes(calamardo))
	}
}
